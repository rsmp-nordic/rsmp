AllCops:
  NewCops: enable
  TargetRubyVersion: 3.4
  Exclude:
    - 'vendor/**/*'
    - 'bin/**/*'
    - '.bundle/**/*'

# Allow longer line lengths for readability, especially in tests with long JSON strings
Layout/LineLength:
  Max: 300
  Exclude:
    - 'spec/**/*'

# Allow some methods to be longer for complex domain logic
Metrics/MethodLength:
  Max: 60

# Allow some classes to be longer for main classes and complex domain components
Metrics/ClassLength:
  Max: 1000

# Allow higher complexity for domain-specific code
Metrics/AbcSize:
  Max: 75

Metrics/CyclomaticComplexity:
  Max: 25

Metrics/PerceivedComplexity:
  Max: 25

# Allow more parameters for domain-specific constructors
Metrics/ParameterLists:
  Max: 10

# Allow some blocks to be longer for complex configurations and tests
Metrics/BlockLength:
  Exclude:
    - 'spec/**/*'
    - 'features/**/*'
    - '*.gemspec'

# Disable some cops that might be too restrictive for this domain
Style/Documentation:
  Enabled: false

# Disable frozen string literal for now to minimize changes
Style/FrozenStringLiteralComment:
  Enabled: false

# Allow double negation for boolean coercion - common Ruby pattern
Style/DoubleNegation:
  Enabled: false

# Allow mix-in usage at top level in test files
Style/MixinUsage:
  Exclude:
    - 'spec/**/*'
    - 'features/**/*'

# Allow class variables where appropriate (used for global counters)
Style/ClassVars:
  Enabled: false

# Allow rescuing Exception in CLI code where needed
Lint/RescueException:
  Exclude:
    - 'lib/rsmp/cli.rb'

# Allow duplicate branch bodies in error handling
Lint/DuplicateBranch:
  Enabled: false

# Allow constant definition in blocks for test helpers
Lint/ConstantDefinitionInBlock:
  Exclude:
    - 'spec/**/*'

# Allow unused method arguments in test helpers and domain-specific interfaces
Lint/UnusedMethodArgument:
  Exclude:
    - 'spec/**/*'
    - 'lib/rsmp/tlc/**/*'

# Allow method names that might not follow typical Ruby conventions for domain-specific APIs
Naming/PredicateMethod:
  Enabled: false

# Allow short parameter names in domain-specific contexts
Naming/MethodParameterName:
  MinNameLength: 1

# Allow variable names that match domain conventions (like camelCase from external APIs)
Naming/VariableName:
  Enabled: false

# Allow format strings where appropriate
Style/FormatString:
  Enabled: false

# Disable some newer cops that may be too restrictive
Style/ArgumentsForwarding:
  Enabled: false

Naming/BlockForwarding:
  Enabled: false

# Allow binary operators with identical operands (may be intentional in domain logic)
Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: false

# Disable gemspec cops as development dependencies in gemspec is common pattern
Gemspec/DevelopmentDependencies:
  Enabled: false

# Allow required Ruby version to be different from target (for compatibility)
Gemspec/RequiredRubyVersion:
  Enabled: false

# Allow returning nil in predicate methods for domain-specific logic (nil = no decision, false = explicit false)  
Style/ReturnNilInPredicateMethodDefinition:
  Enabled: false

# Allow non-local exits from iterators in collector logic
Lint/NonLocalExitFromIterator:
  Enabled: false

# Allow empty files (may be placeholders)
Lint/EmptyFile:
  Enabled: false

# Allow empty when branches in state machines
Lint/EmptyWhen:
  Enabled: false

# Allow duplicate methods for version compatibility
Lint/DuplicateMethods:
  Enabled: false

# Allow suppressed exceptions in async shutdown logic
Lint/SuppressedException:
  Enabled: false

# Allow shadowed exceptions in error handling
Lint/ShadowedException:
  Enabled: false

# Allow accessor method naming for domain APIs
Naming/AccessorMethodName:
  Enabled: false

# Allow getter/setter method naming for domain consistency  
Naming/MethodName:
  Enabled: false

# Allow optional boolean parameters for backwards compatibility
Style/OptionalBooleanParameter:
  Enabled: false

# Allow large modules for JSON schema generation
Metrics/ModuleLength:
  Max: 200

# Allow non-nil checks in domain-specific validation
Style/NonNilCheck:
  Enabled: false

# Allow missing super in message classes (intentional design)
Lint/MissingSuper:
  Enabled: false