#!/usr/bin/env ruby

# Make IRB run inside Async, so async task
# will run the the background.

require 'bundler/setup'
require 'irb'
require 'rsmp'
#require 'async/io/protocol/line'

module IRB

  # custom input class which reads from an async stream
  class MyInputMethod < StdioInputMethod
    def initialize
      super
      @input = RSMP::Protocol.new(
        IO::Stream::Buffered.new($stdin)
      )
    end

    def gets
      # since this is an async stream, the call to read_line()
      # will give the Async reactor a chance to schedule other task
      print @prompt
      line = @input.read_line
      @line[@line_no += 1] = "#{line}\n"
    end
  end

  def self.start(ap_path = nil)
    STDOUT.sync = true
    $0 = File::basename(ap_path, ".rb") if ap_path

    IRB.setup(ap_path)

    if @CONF[:SCRIPT]
      irb = Irb.new(nil, @CONF[:SCRIPT])
    else
      irb = Irb.new(nil,MyInputMethod.new)
    end

    irb.run(@CONF)
  end
end

Async do
  IRB.start(__FILE__)
end